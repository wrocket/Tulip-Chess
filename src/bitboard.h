// The MIT License (MIT)

// Copyright (c) 2015 Brian Wray (brian@wrocket.org)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef BITBOARD_H
#define BITBOARD_H

#include <stdint.h>

// Bitmasks for individual squares.
#define BIT_SQ_A1   ((uint64_t) 0x0000000000000001)
#define BIT_SQ_A2   ((uint64_t) 0x0000000000000100)
#define BIT_SQ_A3   ((uint64_t) 0x0000000000010000)
#define BIT_SQ_A4   ((uint64_t) 0x0000000001000000)
#define BIT_SQ_A5   ((uint64_t) 0x0000000100000000)
#define BIT_SQ_A6   ((uint64_t) 0x0000010000000000)
#define BIT_SQ_A7   ((uint64_t) 0x0001000000000000)
#define BIT_SQ_A8   ((uint64_t) 0x0100000000000000)
#define BIT_SQ_B1   ((uint64_t) 0x0000000000000002)
#define BIT_SQ_B2   ((uint64_t) 0x0000000000000200)
#define BIT_SQ_B3   ((uint64_t) 0x0000000000020000)
#define BIT_SQ_B4   ((uint64_t) 0x0000000002000000)
#define BIT_SQ_B5   ((uint64_t) 0x0000000200000000)
#define BIT_SQ_B6   ((uint64_t) 0x0000020000000000)
#define BIT_SQ_B7   ((uint64_t) 0x0002000000000000)
#define BIT_SQ_B8   ((uint64_t) 0x0200000000000000)
#define BIT_SQ_C1   ((uint64_t) 0x0000000000000004)
#define BIT_SQ_C2   ((uint64_t) 0x0000000000000400)
#define BIT_SQ_C3   ((uint64_t) 0x0000000000040000)
#define BIT_SQ_C4   ((uint64_t) 0x0000000004000000)
#define BIT_SQ_C5   ((uint64_t) 0x0000000400000000)
#define BIT_SQ_C6   ((uint64_t) 0x0000040000000000)
#define BIT_SQ_C7   ((uint64_t) 0x0004000000000000)
#define BIT_SQ_C8   ((uint64_t) 0x0400000000000000)
#define BIT_SQ_D1   ((uint64_t) 0x0000000000000008)
#define BIT_SQ_D2   ((uint64_t) 0x0000000000000800)
#define BIT_SQ_D3   ((uint64_t) 0x0000000000080000)
#define BIT_SQ_D4   ((uint64_t) 0x0000000008000000)
#define BIT_SQ_D5   ((uint64_t) 0x0000000800000000)
#define BIT_SQ_D6   ((uint64_t) 0x0000080000000000)
#define BIT_SQ_D7   ((uint64_t) 0x0008000000000000)
#define BIT_SQ_D8   ((uint64_t) 0x0800000000000000)
#define BIT_SQ_E1   ((uint64_t) 0x0000000000000010)
#define BIT_SQ_E2   ((uint64_t) 0x0000000000001000)
#define BIT_SQ_E3   ((uint64_t) 0x0000000000100000)
#define BIT_SQ_E4   ((uint64_t) 0x0000000010000000)
#define BIT_SQ_E5   ((uint64_t) 0x0000001000000000)
#define BIT_SQ_E6   ((uint64_t) 0x0000100000000000)
#define BIT_SQ_E7   ((uint64_t) 0x0010000000000000)
#define BIT_SQ_E8   ((uint64_t) 0x1000000000000000)
#define BIT_SQ_F1   ((uint64_t) 0x0000000000000020)
#define BIT_SQ_F2   ((uint64_t) 0x0000000000002000)
#define BIT_SQ_F3   ((uint64_t) 0x0000000000200000)
#define BIT_SQ_F4   ((uint64_t) 0x0000000020000000)
#define BIT_SQ_F5   ((uint64_t) 0x0000002000000000)
#define BIT_SQ_F6   ((uint64_t) 0x0000200000000000)
#define BIT_SQ_F7   ((uint64_t) 0x0020000000000000)
#define BIT_SQ_F8   ((uint64_t) 0x2000000000000000)
#define BIT_SQ_G1   ((uint64_t) 0x0000000000000040)
#define BIT_SQ_G2   ((uint64_t) 0x0000000000004000)
#define BIT_SQ_G3   ((uint64_t) 0x0000000000400000)
#define BIT_SQ_G4   ((uint64_t) 0x0000000040000000)
#define BIT_SQ_G5   ((uint64_t) 0x0000004000000000)
#define BIT_SQ_G6   ((uint64_t) 0x0000400000000000)
#define BIT_SQ_G7   ((uint64_t) 0x0040000000000000)
#define BIT_SQ_G8   ((uint64_t) 0x4000000000000000)
#define BIT_SQ_H1   ((uint64_t) 0x0000000000000080)
#define BIT_SQ_H2   ((uint64_t) 0x0000000000008000)
#define BIT_SQ_H3   ((uint64_t) 0x0000000000800000)
#define BIT_SQ_H4   ((uint64_t) 0x0000000080000000)
#define BIT_SQ_H5   ((uint64_t) 0x0000008000000000)
#define BIT_SQ_H6   ((uint64_t) 0x0000800000000000)
#define BIT_SQ_H7   ((uint64_t) 0x0080000000000000)
#define BIT_SQ_H8   ((uint64_t) 0x8000000000000000)

// Bitmasks for the squares of a given color.
#define BIT_SQUARES_LIGHT ((uint64_t) 0x55aa55aa55aa55aa)
#define BIT_SQUARES_DARK (~BIT_SQUARES_LIGHT)

// Bitmasks for particular ranks (basically an OR of all the square bitmasks on a given rank)
#define BIT_RANK_1  ((uint64_t) 0x00000000000000ff)
#define BIT_RANK_2  ((uint64_t) 0x000000000000ff00)
#define BIT_RANK_3  ((uint64_t) 0x0000000000ff0000)
#define BIT_RANK_4  ((uint64_t) 0x00000000ff000000)
#define BIT_RANK_5  ((uint64_t) 0x000000ff00000000)
#define BIT_RANK_6  ((uint64_t) 0x0000ff0000000000)
#define BIT_RANK_7  ((uint64_t) 0x00ff000000000000)
#define BIT_RANK_8  ((uint64_t) 0xff00000000000000)

// Bitmasks for particular file (basically an OR of all the square bitmasks on a given file)
#define BIT_FILE_A  ((uint64_t) 0x0101010101010101)
#define BIT_FILE_B  ((uint64_t) 0x0202020202020202)
#define BIT_FILE_C  ((uint64_t) 0x0404040404040404)
#define BIT_FILE_D  ((uint64_t) 0x0808080808080808)
#define BIT_FILE_E  ((uint64_t) 0x1010101010101010)
#define BIT_FILE_F  ((uint64_t) 0x2020202020202020)
#define BIT_FILE_G  ((uint64_t) 0x4040404040404040)
#define BIT_FILE_H  ((uint64_t) 0x8080808080808080)

// Bitmasks for rook moves from a particular square.
#define BIT_ROOK_A1 ((uint64_t) 0x01010101010101fe)
#define BIT_ROOK_A2 ((uint64_t) 0x010101010101fe01)
#define BIT_ROOK_A3 ((uint64_t) 0x0101010101fe0101)
#define BIT_ROOK_A4 ((uint64_t) 0x01010101fe010101)
#define BIT_ROOK_A5 ((uint64_t) 0x010101fe01010101)
#define BIT_ROOK_A6 ((uint64_t) 0x0101fe0101010101)
#define BIT_ROOK_A7 ((uint64_t) 0x01fe010101010101)
#define BIT_ROOK_A8 ((uint64_t) 0xfe01010101010101)
#define BIT_ROOK_B1 ((uint64_t) 0x02020202020202fd)
#define BIT_ROOK_B2 ((uint64_t) 0x020202020202fd02)
#define BIT_ROOK_B3 ((uint64_t) 0x0202020202fd0202)
#define BIT_ROOK_B4 ((uint64_t) 0x02020202fd020202)
#define BIT_ROOK_B5 ((uint64_t) 0x020202fd02020202)
#define BIT_ROOK_B6 ((uint64_t) 0x0202fd0202020202)
#define BIT_ROOK_B7 ((uint64_t) 0x02fd020202020202)
#define BIT_ROOK_B8 ((uint64_t) 0xfd02020202020202)
#define BIT_ROOK_C1 ((uint64_t) 0x04040404040404fb)
#define BIT_ROOK_C2 ((uint64_t) 0x040404040404fb04)
#define BIT_ROOK_C3 ((uint64_t) 0x0404040404fb0404)
#define BIT_ROOK_C4 ((uint64_t) 0x04040404fb040404)
#define BIT_ROOK_C5 ((uint64_t) 0x040404fb04040404)
#define BIT_ROOK_C6 ((uint64_t) 0x0404fb0404040404)
#define BIT_ROOK_C7 ((uint64_t) 0x04fb040404040404)
#define BIT_ROOK_C8 ((uint64_t) 0xfb04040404040404)
#define BIT_ROOK_D1 ((uint64_t) 0x08080808080808f7)
#define BIT_ROOK_D2 ((uint64_t) 0x080808080808f708)
#define BIT_ROOK_D3 ((uint64_t) 0x0808080808f70808)
#define BIT_ROOK_D4 ((uint64_t) 0x08080808f7080808)
#define BIT_ROOK_D5 ((uint64_t) 0x080808f708080808)
#define BIT_ROOK_D6 ((uint64_t) 0x0808f70808080808)
#define BIT_ROOK_D7 ((uint64_t) 0x08f7080808080808)
#define BIT_ROOK_D8 ((uint64_t) 0xf708080808080808)
#define BIT_ROOK_E1 ((uint64_t) 0x10101010101010ef)
#define BIT_ROOK_E2 ((uint64_t) 0x101010101010ef10)
#define BIT_ROOK_E3 ((uint64_t) 0x1010101010ef1010)
#define BIT_ROOK_E4 ((uint64_t) 0x10101010ef101010)
#define BIT_ROOK_E5 ((uint64_t) 0x101010ef10101010)
#define BIT_ROOK_E6 ((uint64_t) 0x1010ef1010101010)
#define BIT_ROOK_E7 ((uint64_t) 0x10ef101010101010)
#define BIT_ROOK_E8 ((uint64_t) 0xef10101010101010)
#define BIT_ROOK_F1 ((uint64_t) 0x20202020202020df)
#define BIT_ROOK_F2 ((uint64_t) 0x202020202020df20)
#define BIT_ROOK_F3 ((uint64_t) 0x2020202020df2020)
#define BIT_ROOK_F4 ((uint64_t) 0x20202020df202020)
#define BIT_ROOK_F5 ((uint64_t) 0x202020df20202020)
#define BIT_ROOK_F6 ((uint64_t) 0x2020df2020202020)
#define BIT_ROOK_F7 ((uint64_t) 0x20df202020202020)
#define BIT_ROOK_F8 ((uint64_t) 0xdf20202020202020)
#define BIT_ROOK_G1 ((uint64_t) 0x40404040404040bf)
#define BIT_ROOK_G2 ((uint64_t) 0x404040404040bf40)
#define BIT_ROOK_G3 ((uint64_t) 0x4040404040bf4040)
#define BIT_ROOK_G4 ((uint64_t) 0x40404040bf404040)
#define BIT_ROOK_G5 ((uint64_t) 0x404040bf40404040)
#define BIT_ROOK_G6 ((uint64_t) 0x4040bf4040404040)
#define BIT_ROOK_G7 ((uint64_t) 0x40bf404040404040)
#define BIT_ROOK_G8 ((uint64_t) 0xbf40404040404040)
#define BIT_ROOK_H1 ((uint64_t) 0x808080808080807f)
#define BIT_ROOK_H2 ((uint64_t) 0x8080808080807f80)
#define BIT_ROOK_H3 ((uint64_t) 0x80808080807f8080)
#define BIT_ROOK_H4 ((uint64_t) 0x808080807f808080)
#define BIT_ROOK_H5 ((uint64_t) 0x8080807f80808080)
#define BIT_ROOK_H6 ((uint64_t) 0x80807f8080808080)
#define BIT_ROOK_H7 ((uint64_t) 0x807f808080808080)
#define BIT_ROOK_H8 ((uint64_t) 0x7f80808080808080)

// Bitmasks for bishop moves from a particular square.
#define BIT_BISHOP_A1   ((uint64_t) 0x8040201008040200)
#define BIT_BISHOP_A2   ((uint64_t) 0x4020100804020002)
#define BIT_BISHOP_A3   ((uint64_t) 0x2010080402000204)
#define BIT_BISHOP_A4   ((uint64_t) 0x1008040200020408)
#define BIT_BISHOP_A5   ((uint64_t) 0x0804020002040810)
#define BIT_BISHOP_A6   ((uint64_t) 0x0402000204081020)
#define BIT_BISHOP_A7   ((uint64_t) 0x0200020408102040)
#define BIT_BISHOP_A8   ((uint64_t) 0x0002040810204080)
#define BIT_BISHOP_B1   ((uint64_t) 0x0080402010080500)
#define BIT_BISHOP_B2   ((uint64_t) 0x8040201008050005)
#define BIT_BISHOP_B3   ((uint64_t) 0x4020100805000508)
#define BIT_BISHOP_B4   ((uint64_t) 0x2010080500050810)
#define BIT_BISHOP_B5   ((uint64_t) 0x1008050005081020)
#define BIT_BISHOP_B6   ((uint64_t) 0x0805000508102040)
#define BIT_BISHOP_B7   ((uint64_t) 0x0500050810204080)
#define BIT_BISHOP_B8   ((uint64_t) 0x0005081020408000)
#define BIT_BISHOP_C1   ((uint64_t) 0x0000804020110a00)
#define BIT_BISHOP_C2   ((uint64_t) 0x00804020110a000a)
#define BIT_BISHOP_C3   ((uint64_t) 0x804020110a000a11)
#define BIT_BISHOP_C4   ((uint64_t) 0x4020110a000a1120)
#define BIT_BISHOP_C5   ((uint64_t) 0x20110a000a112040)
#define BIT_BISHOP_C6   ((uint64_t) 0x110a000a11204080)
#define BIT_BISHOP_C7   ((uint64_t) 0x0a000a1120408000)
#define BIT_BISHOP_C8   ((uint64_t) 0x000a112040800000)
#define BIT_BISHOP_D1   ((uint64_t) 0x0000008041221400)
#define BIT_BISHOP_D2   ((uint64_t) 0x0000804122140014)
#define BIT_BISHOP_D3   ((uint64_t) 0x0080412214001422)
#define BIT_BISHOP_D4   ((uint64_t) 0x8041221400142241)
#define BIT_BISHOP_D5   ((uint64_t) 0x4122140014224180)
#define BIT_BISHOP_D6   ((uint64_t) 0x2214001422418000)
#define BIT_BISHOP_D7   ((uint64_t) 0x1400142241800000)
#define BIT_BISHOP_D8   ((uint64_t) 0x0014224180000000)
#define BIT_BISHOP_E1   ((uint64_t) 0x0000000182442800)
#define BIT_BISHOP_E2   ((uint64_t) 0x0000018244280028)
#define BIT_BISHOP_E3   ((uint64_t) 0x0001824428002844)
#define BIT_BISHOP_E4   ((uint64_t) 0x0182442800284482)
#define BIT_BISHOP_E5   ((uint64_t) 0x8244280028448201)
#define BIT_BISHOP_E6   ((uint64_t) 0x4428002844820100)
#define BIT_BISHOP_E7   ((uint64_t) 0x2800284482010000)
#define BIT_BISHOP_E8   ((uint64_t) 0x0028448201000000)
#define BIT_BISHOP_F1   ((uint64_t) 0x0000010204885000)
#define BIT_BISHOP_F2   ((uint64_t) 0x0001020488500050)
#define BIT_BISHOP_F3   ((uint64_t) 0x0102048850005088)
#define BIT_BISHOP_F4   ((uint64_t) 0x0204885000508804)
#define BIT_BISHOP_F5   ((uint64_t) 0x0488500050880402)
#define BIT_BISHOP_F6   ((uint64_t) 0x8850005088040201)
#define BIT_BISHOP_F7   ((uint64_t) 0x5000508804020100)
#define BIT_BISHOP_F8   ((uint64_t) 0x0050880402010000)
#define BIT_BISHOP_G1   ((uint64_t) 0x000102040810a000)
#define BIT_BISHOP_G2   ((uint64_t) 0x0102040810a000a0)
#define BIT_BISHOP_G3   ((uint64_t) 0x02040810a000a010)
#define BIT_BISHOP_G4   ((uint64_t) 0x040810a000a01008)
#define BIT_BISHOP_G5   ((uint64_t) 0x0810a000a0100804)
#define BIT_BISHOP_G6   ((uint64_t) 0x10a000a010080402)
#define BIT_BISHOP_G7   ((uint64_t) 0xa000a01008040201)
#define BIT_BISHOP_G8   ((uint64_t) 0x00a0100804020100)
#define BIT_BISHOP_H1   ((uint64_t) 0x0102040810204000)
#define BIT_BISHOP_H2   ((uint64_t) 0x0204081020400040)
#define BIT_BISHOP_H3   ((uint64_t) 0x0408102040004020)
#define BIT_BISHOP_H4   ((uint64_t) 0x0810204000402010)
#define BIT_BISHOP_H5   ((uint64_t) 0x1020400040201008)
#define BIT_BISHOP_H6   ((uint64_t) 0x2040004020100804)
#define BIT_BISHOP_H7   ((uint64_t) 0x4000402010080402)
#define BIT_BISHOP_H8   ((uint64_t) 0x0040201008040201)

// Bitmasks for queen moves from a particular square.
#define BIT_QUEEN_A1    ((uint64_t) 0x81412111090503fe)
#define BIT_QUEEN_A2    ((uint64_t) 0x412111090503fe03)
#define BIT_QUEEN_A3    ((uint64_t) 0x2111090503fe0305)
#define BIT_QUEEN_A4    ((uint64_t) 0x11090503fe030509)
#define BIT_QUEEN_A5    ((uint64_t) 0x090503fe03050911)
#define BIT_QUEEN_A6    ((uint64_t) 0x0503fe0305091121)
#define BIT_QUEEN_A7    ((uint64_t) 0x03fe030509112141)
#define BIT_QUEEN_A8    ((uint64_t) 0xfe03050911214181)
#define BIT_QUEEN_B1    ((uint64_t) 0x02824222120a07fd)
#define BIT_QUEEN_B2    ((uint64_t) 0x824222120a07fd07)
#define BIT_QUEEN_B3    ((uint64_t) 0x4222120a07fd070a)
#define BIT_QUEEN_B4    ((uint64_t) 0x22120a07fd070a12)
#define BIT_QUEEN_B5    ((uint64_t) 0x120a07fd070a1222)
#define BIT_QUEEN_B6    ((uint64_t) 0x0a07fd070a122242)
#define BIT_QUEEN_B7    ((uint64_t) 0x07fd070a12224282)
#define BIT_QUEEN_B8    ((uint64_t) 0xfd070a1222428202)
#define BIT_QUEEN_C1    ((uint64_t) 0x0404844424150efb)
#define BIT_QUEEN_C2    ((uint64_t) 0x04844424150efb0e)
#define BIT_QUEEN_C3    ((uint64_t) 0x844424150efb0e15)
#define BIT_QUEEN_C4    ((uint64_t) 0x4424150efb0e1524)
#define BIT_QUEEN_C5    ((uint64_t) 0x24150efb0e152444)
#define BIT_QUEEN_C6    ((uint64_t) 0x150efb0e15244484)
#define BIT_QUEEN_C7    ((uint64_t) 0x0efb0e1524448404)
#define BIT_QUEEN_C8    ((uint64_t) 0xfb0e152444840404)
#define BIT_QUEEN_D1    ((uint64_t) 0x08080888492a1cf7)
#define BIT_QUEEN_D2    ((uint64_t) 0x080888492a1cf71c)
#define BIT_QUEEN_D3    ((uint64_t) 0x0888492a1cf71c2a)
#define BIT_QUEEN_D4    ((uint64_t) 0x88492a1cf71c2a49)
#define BIT_QUEEN_D5    ((uint64_t) 0x492a1cf71c2a4988)
#define BIT_QUEEN_D6    ((uint64_t) 0x2a1cf71c2a498808)
#define BIT_QUEEN_D7    ((uint64_t) 0x1cf71c2a49880808)
#define BIT_QUEEN_D8    ((uint64_t) 0xf71c2a4988080808)
#define BIT_QUEEN_E1    ((uint64_t) 0x10101011925438ef)
#define BIT_QUEEN_E2    ((uint64_t) 0x101011925438ef38)
#define BIT_QUEEN_E3    ((uint64_t) 0x1011925438ef3854)
#define BIT_QUEEN_E4    ((uint64_t) 0x11925438ef385492)
#define BIT_QUEEN_E5    ((uint64_t) 0x925438ef38549211)
#define BIT_QUEEN_E6    ((uint64_t) 0x5438ef3854921110)
#define BIT_QUEEN_E7    ((uint64_t) 0x38ef385492111010)
#define BIT_QUEEN_E8    ((uint64_t) 0xef38549211101010)
#define BIT_QUEEN_F1    ((uint64_t) 0x2020212224a870df)
#define BIT_QUEEN_F2    ((uint64_t) 0x20212224a870df70)
#define BIT_QUEEN_F3    ((uint64_t) 0x212224a870df70a8)
#define BIT_QUEEN_F4    ((uint64_t) 0x2224a870df70a824)
#define BIT_QUEEN_F5    ((uint64_t) 0x24a870df70a82422)
#define BIT_QUEEN_F6    ((uint64_t) 0xa870df70a8242221)
#define BIT_QUEEN_F7    ((uint64_t) 0x70df70a824222120)
#define BIT_QUEEN_F8    ((uint64_t) 0xdf70a82422212020)
#define BIT_QUEEN_G1    ((uint64_t) 0x404142444850e0bf)
#define BIT_QUEEN_G2    ((uint64_t) 0x4142444850e0bfe0)
#define BIT_QUEEN_G3    ((uint64_t) 0x42444850e0bfe050)
#define BIT_QUEEN_G4    ((uint64_t) 0x444850e0bfe05048)
#define BIT_QUEEN_G5    ((uint64_t) 0x4850e0bfe0504844)
#define BIT_QUEEN_G6    ((uint64_t) 0x50e0bfe050484442)
#define BIT_QUEEN_G7    ((uint64_t) 0xe0bfe05048444241)
#define BIT_QUEEN_G8    ((uint64_t) 0xbfe0504844424140)
#define BIT_QUEEN_H1    ((uint64_t) 0x8182848890a0c07f)
#define BIT_QUEEN_H2    ((uint64_t) 0x82848890a0c07fc0)
#define BIT_QUEEN_H3    ((uint64_t) 0x848890a0c07fc0a0)
#define BIT_QUEEN_H4    ((uint64_t) 0x8890a0c07fc0a090)
#define BIT_QUEEN_H5    ((uint64_t) 0x90a0c07fc0a09088)
#define BIT_QUEEN_H6    ((uint64_t) 0xa0c07fc0a0908884)
#define BIT_QUEEN_H7    ((uint64_t) 0xc07fc0a090888482)
#define BIT_QUEEN_H8    ((uint64_t) 0x7fc0a09088848281)

// Bitmasks for knight moves from a particular square.
#define BIT_KNIGHT_A1   ((uint64_t) 0x0000000000020400)
#define BIT_KNIGHT_A2   ((uint64_t) 0x0000000002040004)
#define BIT_KNIGHT_A3   ((uint64_t) 0x0000000204000402)
#define BIT_KNIGHT_A4   ((uint64_t) 0x0000020400040200)
#define BIT_KNIGHT_A5   ((uint64_t) 0x0002040004020000)
#define BIT_KNIGHT_A6   ((uint64_t) 0x0204000402000000)
#define BIT_KNIGHT_A7   ((uint64_t) 0x0400040200000000)
#define BIT_KNIGHT_A8   ((uint64_t) 0x0004020000000000)
#define BIT_KNIGHT_B1   ((uint64_t) 0x0000000000050800)
#define BIT_KNIGHT_B2   ((uint64_t) 0x0000000005080008)
#define BIT_KNIGHT_B3   ((uint64_t) 0x0000000508000805)
#define BIT_KNIGHT_B4   ((uint64_t) 0x0000050800080500)
#define BIT_KNIGHT_B5   ((uint64_t) 0x0005080008050000)
#define BIT_KNIGHT_B6   ((uint64_t) 0x0508000805000000)
#define BIT_KNIGHT_B7   ((uint64_t) 0x0800080500000000)
#define BIT_KNIGHT_B8   ((uint64_t) 0x0008050000000000)
#define BIT_KNIGHT_C1   ((uint64_t) 0x00000000000a1100)
#define BIT_KNIGHT_C2   ((uint64_t) 0x000000000a110011)
#define BIT_KNIGHT_C3   ((uint64_t) 0x0000000a1100110a)
#define BIT_KNIGHT_C4   ((uint64_t) 0x00000a1100110a00)
#define BIT_KNIGHT_C5   ((uint64_t) 0x000a1100110a0000)
#define BIT_KNIGHT_C6   ((uint64_t) 0x0a1100110a000000)
#define BIT_KNIGHT_C7   ((uint64_t) 0x1100110a00000000)
#define BIT_KNIGHT_C8   ((uint64_t) 0x00110a0000000000)
#define BIT_KNIGHT_D1   ((uint64_t) 0x0000000000142200)
#define BIT_KNIGHT_D2   ((uint64_t) 0x0000000014220022)
#define BIT_KNIGHT_D3   ((uint64_t) 0x0000001422002214)
#define BIT_KNIGHT_D4   ((uint64_t) 0x0000142200221400)
#define BIT_KNIGHT_D5   ((uint64_t) 0x0014220022140000)
#define BIT_KNIGHT_D6   ((uint64_t) 0x1422002214000000)
#define BIT_KNIGHT_D7   ((uint64_t) 0x2200221400000000)
#define BIT_KNIGHT_D8   ((uint64_t) 0x0022140000000000)
#define BIT_KNIGHT_E1   ((uint64_t) 0x0000000000284400)
#define BIT_KNIGHT_E2   ((uint64_t) 0x0000000028440044)
#define BIT_KNIGHT_E3   ((uint64_t) 0x0000002844004428)
#define BIT_KNIGHT_E4   ((uint64_t) 0x0000284400442800)
#define BIT_KNIGHT_E5   ((uint64_t) 0x0028440044280000)
#define BIT_KNIGHT_E6   ((uint64_t) 0x2844004428000000)
#define BIT_KNIGHT_E7   ((uint64_t) 0x4400442800000000)
#define BIT_KNIGHT_E8   ((uint64_t) 0x0044280000000000)
#define BIT_KNIGHT_F1   ((uint64_t) 0x0000000000508800)
#define BIT_KNIGHT_F2   ((uint64_t) 0x0000000050880088)
#define BIT_KNIGHT_F3   ((uint64_t) 0x0000005088008850)
#define BIT_KNIGHT_F4   ((uint64_t) 0x0000508800885000)
#define BIT_KNIGHT_F5   ((uint64_t) 0x0050880088500000)
#define BIT_KNIGHT_F6   ((uint64_t) 0x5088008850000000)
#define BIT_KNIGHT_F7   ((uint64_t) 0x8800885000000000)
#define BIT_KNIGHT_F8   ((uint64_t) 0x0088500000000000)
#define BIT_KNIGHT_G1   ((uint64_t) 0x0000000000a01000)
#define BIT_KNIGHT_G2   ((uint64_t) 0x00000000a0100010)
#define BIT_KNIGHT_G3   ((uint64_t) 0x000000a0100010a0)
#define BIT_KNIGHT_G4   ((uint64_t) 0x0000a0100010a000)
#define BIT_KNIGHT_G5   ((uint64_t) 0x00a0100010a00000)
#define BIT_KNIGHT_G6   ((uint64_t) 0xa0100010a0000000)
#define BIT_KNIGHT_G7   ((uint64_t) 0x100010a000000000)
#define BIT_KNIGHT_G8   ((uint64_t) 0x0010a00000000000)
#define BIT_KNIGHT_H1   ((uint64_t) 0x0000000000402000)
#define BIT_KNIGHT_H2   ((uint64_t) 0x0000000040200020)
#define BIT_KNIGHT_H3   ((uint64_t) 0x0000004020002040)
#define BIT_KNIGHT_H4   ((uint64_t) 0x0000402000204000)
#define BIT_KNIGHT_H5   ((uint64_t) 0x0040200020400000)
#define BIT_KNIGHT_H6   ((uint64_t) 0x4020002040000000)
#define BIT_KNIGHT_H7   ((uint64_t) 0x2000204000000000)
#define BIT_KNIGHT_H8   ((uint64_t) 0x0020400000000000)

// Bitmasks for king moves from a particular square.
#define BIT_KING_A1 ((uint64_t) 0x0000000000000302)
#define BIT_KING_A2 ((uint64_t) 0x0000000000030203)
#define BIT_KING_A3 ((uint64_t) 0x0000000003020300)
#define BIT_KING_A4 ((uint64_t) 0x0000000302030000)
#define BIT_KING_A5 ((uint64_t) 0x0000030203000000)
#define BIT_KING_A6 ((uint64_t) 0x0003020300000000)
#define BIT_KING_A7 ((uint64_t) 0x0302030000000000)
#define BIT_KING_A8 ((uint64_t) 0x0203000000000000)
#define BIT_KING_B1 ((uint64_t) 0x0000000000000705)
#define BIT_KING_B2 ((uint64_t) 0x0000000000070507)
#define BIT_KING_B3 ((uint64_t) 0x0000000007050700)
#define BIT_KING_B4 ((uint64_t) 0x0000000705070000)
#define BIT_KING_B5 ((uint64_t) 0x0000070507000000)
#define BIT_KING_B6 ((uint64_t) 0x0007050700000000)
#define BIT_KING_B7 ((uint64_t) 0x0705070000000000)
#define BIT_KING_B8 ((uint64_t) 0x0507000000000000)
#define BIT_KING_C1 ((uint64_t) 0x0000000000000e0a)
#define BIT_KING_C2 ((uint64_t) 0x00000000000e0a0e)
#define BIT_KING_C3 ((uint64_t) 0x000000000e0a0e00)
#define BIT_KING_C4 ((uint64_t) 0x0000000e0a0e0000)
#define BIT_KING_C5 ((uint64_t) 0x00000e0a0e000000)
#define BIT_KING_C6 ((uint64_t) 0x000e0a0e00000000)
#define BIT_KING_C7 ((uint64_t) 0x0e0a0e0000000000)
#define BIT_KING_C8 ((uint64_t) 0x0a0e000000000000)
#define BIT_KING_D1 ((uint64_t) 0x0000000000001c14)
#define BIT_KING_D2 ((uint64_t) 0x00000000001c141c)
#define BIT_KING_D3 ((uint64_t) 0x000000001c141c00)
#define BIT_KING_D4 ((uint64_t) 0x0000001c141c0000)
#define BIT_KING_D5 ((uint64_t) 0x00001c141c000000)
#define BIT_KING_D6 ((uint64_t) 0x001c141c00000000)
#define BIT_KING_D7 ((uint64_t) 0x1c141c0000000000)
#define BIT_KING_D8 ((uint64_t) 0x141c000000000000)
#define BIT_KING_E1 ((uint64_t) 0x0000000000003828)
#define BIT_KING_E2 ((uint64_t) 0x0000000000382838)
#define BIT_KING_E3 ((uint64_t) 0x0000000038283800)
#define BIT_KING_E4 ((uint64_t) 0x0000003828380000)
#define BIT_KING_E5 ((uint64_t) 0x0000382838000000)
#define BIT_KING_E6 ((uint64_t) 0x0038283800000000)
#define BIT_KING_E7 ((uint64_t) 0x3828380000000000)
#define BIT_KING_E8 ((uint64_t) 0x2838000000000000)
#define BIT_KING_F1 ((uint64_t) 0x0000000000007050)
#define BIT_KING_F2 ((uint64_t) 0x0000000000705070)
#define BIT_KING_F3 ((uint64_t) 0x0000000070507000)
#define BIT_KING_F4 ((uint64_t) 0x0000007050700000)
#define BIT_KING_F5 ((uint64_t) 0x0000705070000000)
#define BIT_KING_F6 ((uint64_t) 0x0070507000000000)
#define BIT_KING_F7 ((uint64_t) 0x7050700000000000)
#define BIT_KING_F8 ((uint64_t) 0x5070000000000000)
#define BIT_KING_G1 ((uint64_t) 0x000000000000e0a0)
#define BIT_KING_G2 ((uint64_t) 0x0000000000e0a0e0)
#define BIT_KING_G3 ((uint64_t) 0x00000000e0a0e000)
#define BIT_KING_G4 ((uint64_t) 0x000000e0a0e00000)
#define BIT_KING_G5 ((uint64_t) 0x0000e0a0e0000000)
#define BIT_KING_G6 ((uint64_t) 0x00e0a0e000000000)
#define BIT_KING_G7 ((uint64_t) 0xe0a0e00000000000)
#define BIT_KING_G8 ((uint64_t) 0xa0e0000000000000)
#define BIT_KING_H1 ((uint64_t) 0x000000000000c040)
#define BIT_KING_H2 ((uint64_t) 0x0000000000c040c0)
#define BIT_KING_H3 ((uint64_t) 0x00000000c040c000)
#define BIT_KING_H4 ((uint64_t) 0x000000c040c00000)
#define BIT_KING_H5 ((uint64_t) 0x0000c040c0000000)
#define BIT_KING_H6 ((uint64_t) 0x00c040c000000000)
#define BIT_KING_H7 ((uint64_t) 0xc040c00000000000)
#define BIT_KING_H8 ((uint64_t) 0x40c0000000000000)

// Bitmasks for white pawn attacks.
#define BIT_WPAWN_A1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_A2    ((uint64_t) 0x0000000000000002)
#define BIT_WPAWN_A3    ((uint64_t) 0x0000000000000200)
#define BIT_WPAWN_A4    ((uint64_t) 0x0000000000020000)
#define BIT_WPAWN_A5    ((uint64_t) 0x0000000002000000)
#define BIT_WPAWN_A6    ((uint64_t) 0x0000000200000000)
#define BIT_WPAWN_A7    ((uint64_t) 0x0000020000000000)
#define BIT_WPAWN_A8    ((uint64_t) 0x0002000000000000)
#define BIT_WPAWN_B1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_B2    ((uint64_t) 0x0000000000000005)
#define BIT_WPAWN_B3    ((uint64_t) 0x0000000000000500)
#define BIT_WPAWN_B4    ((uint64_t) 0x0000000000050000)
#define BIT_WPAWN_B5    ((uint64_t) 0x0000000005000000)
#define BIT_WPAWN_B6    ((uint64_t) 0x0000000500000000)
#define BIT_WPAWN_B7    ((uint64_t) 0x0000050000000000)
#define BIT_WPAWN_B8    ((uint64_t) 0x0005000000000000)
#define BIT_WPAWN_C1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_C2    ((uint64_t) 0x000000000000000a)
#define BIT_WPAWN_C3    ((uint64_t) 0x0000000000000a00)
#define BIT_WPAWN_C4    ((uint64_t) 0x00000000000a0000)
#define BIT_WPAWN_C5    ((uint64_t) 0x000000000a000000)
#define BIT_WPAWN_C6    ((uint64_t) 0x0000000a00000000)
#define BIT_WPAWN_C7    ((uint64_t) 0x00000a0000000000)
#define BIT_WPAWN_C8    ((uint64_t) 0x000a000000000000)
#define BIT_WPAWN_D1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_D2    ((uint64_t) 0x0000000000000014)
#define BIT_WPAWN_D3    ((uint64_t) 0x0000000000001400)
#define BIT_WPAWN_D4    ((uint64_t) 0x0000000000140000)
#define BIT_WPAWN_D5    ((uint64_t) 0x0000000014000000)
#define BIT_WPAWN_D6    ((uint64_t) 0x0000001400000000)
#define BIT_WPAWN_D7    ((uint64_t) 0x0000140000000000)
#define BIT_WPAWN_D8    ((uint64_t) 0x0014000000000000)
#define BIT_WPAWN_E1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_E2    ((uint64_t) 0x0000000000000028)
#define BIT_WPAWN_E3    ((uint64_t) 0x0000000000002800)
#define BIT_WPAWN_E4    ((uint64_t) 0x0000000000280000)
#define BIT_WPAWN_E5    ((uint64_t) 0x0000000028000000)
#define BIT_WPAWN_E6    ((uint64_t) 0x0000002800000000)
#define BIT_WPAWN_E7    ((uint64_t) 0x0000280000000000)
#define BIT_WPAWN_E8    ((uint64_t) 0x0028000000000000)
#define BIT_WPAWN_F1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_F2    ((uint64_t) 0x0000000000000050)
#define BIT_WPAWN_F3    ((uint64_t) 0x0000000000005000)
#define BIT_WPAWN_F4    ((uint64_t) 0x0000000000500000)
#define BIT_WPAWN_F5    ((uint64_t) 0x0000000050000000)
#define BIT_WPAWN_F6    ((uint64_t) 0x0000005000000000)
#define BIT_WPAWN_F7    ((uint64_t) 0x0000500000000000)
#define BIT_WPAWN_F8    ((uint64_t) 0x0050000000000000)
#define BIT_WPAWN_G1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_G2    ((uint64_t) 0x00000000000000a0)
#define BIT_WPAWN_G3    ((uint64_t) 0x000000000000a000)
#define BIT_WPAWN_G4    ((uint64_t) 0x0000000000a00000)
#define BIT_WPAWN_G5    ((uint64_t) 0x00000000a0000000)
#define BIT_WPAWN_G6    ((uint64_t) 0x000000a000000000)
#define BIT_WPAWN_G7    ((uint64_t) 0x0000a00000000000)
#define BIT_WPAWN_G8    ((uint64_t) 0x00a0000000000000)
#define BIT_WPAWN_H1    ((uint64_t) 0x0000000000000000)
#define BIT_WPAWN_H2    ((uint64_t) 0x0000000000000040)
#define BIT_WPAWN_H3    ((uint64_t) 0x0000000000004000)
#define BIT_WPAWN_H4    ((uint64_t) 0x0000000000400000)
#define BIT_WPAWN_H5    ((uint64_t) 0x0000000040000000)
#define BIT_WPAWN_H6    ((uint64_t) 0x0000004000000000)
#define BIT_WPAWN_H7    ((uint64_t) 0x0000400000000000)
#define BIT_WPAWN_H8    ((uint64_t) 0x0040000000000000)

// Bitmasks for black pawn attacks.
#define BIT_BPAWN_A1    ((uint64_t) 0x0000000000000200)
#define BIT_BPAWN_A2    ((uint64_t) 0x0000000000020000)
#define BIT_BPAWN_A3    ((uint64_t) 0x0000000002000000)
#define BIT_BPAWN_A4    ((uint64_t) 0x0000000200000000)
#define BIT_BPAWN_A5    ((uint64_t) 0x0000020000000000)
#define BIT_BPAWN_A6    ((uint64_t) 0x0002000000000000)
#define BIT_BPAWN_A7    ((uint64_t) 0x0200000000000000)
#define BIT_BPAWN_A8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_B1    ((uint64_t) 0x0000000000000500)
#define BIT_BPAWN_B2    ((uint64_t) 0x0000000000050000)
#define BIT_BPAWN_B3    ((uint64_t) 0x0000000005000000)
#define BIT_BPAWN_B4    ((uint64_t) 0x0000000500000000)
#define BIT_BPAWN_B5    ((uint64_t) 0x0000050000000000)
#define BIT_BPAWN_B6    ((uint64_t) 0x0005000000000000)
#define BIT_BPAWN_B7    ((uint64_t) 0x0500000000000000)
#define BIT_BPAWN_B8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_C1    ((uint64_t) 0x0000000000000a00)
#define BIT_BPAWN_C2    ((uint64_t) 0x00000000000a0000)
#define BIT_BPAWN_C3    ((uint64_t) 0x000000000a000000)
#define BIT_BPAWN_C4    ((uint64_t) 0x0000000a00000000)
#define BIT_BPAWN_C5    ((uint64_t) 0x00000a0000000000)
#define BIT_BPAWN_C6    ((uint64_t) 0x000a000000000000)
#define BIT_BPAWN_C7    ((uint64_t) 0x0a00000000000000)
#define BIT_BPAWN_C8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_D1    ((uint64_t) 0x0000000000001400)
#define BIT_BPAWN_D2    ((uint64_t) 0x0000000000140000)
#define BIT_BPAWN_D3    ((uint64_t) 0x0000000014000000)
#define BIT_BPAWN_D4    ((uint64_t) 0x0000001400000000)
#define BIT_BPAWN_D5    ((uint64_t) 0x0000140000000000)
#define BIT_BPAWN_D6    ((uint64_t) 0x0014000000000000)
#define BIT_BPAWN_D7    ((uint64_t) 0x1400000000000000)
#define BIT_BPAWN_D8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_E1    ((uint64_t) 0x0000000000002800)
#define BIT_BPAWN_E2    ((uint64_t) 0x0000000000280000)
#define BIT_BPAWN_E3    ((uint64_t) 0x0000000028000000)
#define BIT_BPAWN_E4    ((uint64_t) 0x0000002800000000)
#define BIT_BPAWN_E5    ((uint64_t) 0x0000280000000000)
#define BIT_BPAWN_E6    ((uint64_t) 0x0028000000000000)
#define BIT_BPAWN_E7    ((uint64_t) 0x2800000000000000)
#define BIT_BPAWN_E8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_F1    ((uint64_t) 0x0000000000005000)
#define BIT_BPAWN_F2    ((uint64_t) 0x0000000000500000)
#define BIT_BPAWN_F3    ((uint64_t) 0x0000000050000000)
#define BIT_BPAWN_F4    ((uint64_t) 0x0000005000000000)
#define BIT_BPAWN_F5    ((uint64_t) 0x0000500000000000)
#define BIT_BPAWN_F6    ((uint64_t) 0x0050000000000000)
#define BIT_BPAWN_F7    ((uint64_t) 0x5000000000000000)
#define BIT_BPAWN_F8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_G1    ((uint64_t) 0x000000000000a000)
#define BIT_BPAWN_G2    ((uint64_t) 0x0000000000a00000)
#define BIT_BPAWN_G3    ((uint64_t) 0x00000000a0000000)
#define BIT_BPAWN_G4    ((uint64_t) 0x000000a000000000)
#define BIT_BPAWN_G5    ((uint64_t) 0x0000a00000000000)
#define BIT_BPAWN_G6    ((uint64_t) 0x00a0000000000000)
#define BIT_BPAWN_G7    ((uint64_t) 0xa000000000000000)
#define BIT_BPAWN_G8    ((uint64_t) 0x0000000000000000)
#define BIT_BPAWN_H1    ((uint64_t) 0x0000000000004000)
#define BIT_BPAWN_H2    ((uint64_t) 0x0000000000400000)
#define BIT_BPAWN_H3    ((uint64_t) 0x0000000040000000)
#define BIT_BPAWN_H4    ((uint64_t) 0x0000004000000000)
#define BIT_BPAWN_H5    ((uint64_t) 0x0000400000000000)
#define BIT_BPAWN_H6    ((uint64_t) 0x0040000000000000)
#define BIT_BPAWN_H7    ((uint64_t) 0x4000000000000000)
#define BIT_BPAWN_H8    ((uint64_t) 0x0000000000000000)

// Bitmasks for passed pawn detection for white pawns
#define BIT_PPAWN_W_A1  0x0303030303030300
#define BIT_PPAWN_W_A2  0x0303030303030000
#define BIT_PPAWN_W_A3  0x0303030303000000
#define BIT_PPAWN_W_A4  0x0303030300000000
#define BIT_PPAWN_W_A5  0x0303030000000000
#define BIT_PPAWN_W_A6  0x0303000000000000
#define BIT_PPAWN_W_A7  0x0300000000000000
#define BIT_PPAWN_W_A8  0x0000000000000000
#define BIT_PPAWN_W_B1  0x0707070707070700
#define BIT_PPAWN_W_B2  0x0707070707070000
#define BIT_PPAWN_W_B3  0x0707070707000000
#define BIT_PPAWN_W_B4  0x0707070700000000
#define BIT_PPAWN_W_B5  0x0707070000000000
#define BIT_PPAWN_W_B6  0x0707000000000000
#define BIT_PPAWN_W_B7  0x0700000000000000
#define BIT_PPAWN_W_B8  0x0000000000000000
#define BIT_PPAWN_W_C1  0x0e0e0e0e0e0e0e00
#define BIT_PPAWN_W_C2  0x0e0e0e0e0e0e0000
#define BIT_PPAWN_W_C3  0x0e0e0e0e0e000000
#define BIT_PPAWN_W_C4  0x0e0e0e0e00000000
#define BIT_PPAWN_W_C5  0x0e0e0e0000000000
#define BIT_PPAWN_W_C6  0x0e0e000000000000
#define BIT_PPAWN_W_C7  0x0e00000000000000
#define BIT_PPAWN_W_C8  0x0000000000000000
#define BIT_PPAWN_W_D1  0x1c1c1c1c1c1c1c00
#define BIT_PPAWN_W_D2  0x1c1c1c1c1c1c0000
#define BIT_PPAWN_W_D3  0x1c1c1c1c1c000000
#define BIT_PPAWN_W_D4  0x1c1c1c1c00000000
#define BIT_PPAWN_W_D5  0x1c1c1c0000000000
#define BIT_PPAWN_W_D6  0x1c1c000000000000
#define BIT_PPAWN_W_D7  0x1c00000000000000
#define BIT_PPAWN_W_D8  0x0000000000000000
#define BIT_PPAWN_W_E1  0x3838383838383800
#define BIT_PPAWN_W_E2  0x3838383838380000
#define BIT_PPAWN_W_E3  0x3838383838000000
#define BIT_PPAWN_W_E4  0x3838383800000000
#define BIT_PPAWN_W_E5  0x3838380000000000
#define BIT_PPAWN_W_E6  0x3838000000000000
#define BIT_PPAWN_W_E7  0x3800000000000000
#define BIT_PPAWN_W_E8  0x0000000000000000
#define BIT_PPAWN_W_F1  0x7070707070707000
#define BIT_PPAWN_W_F2  0x7070707070700000
#define BIT_PPAWN_W_F3  0x7070707070000000
#define BIT_PPAWN_W_F4  0x7070707000000000
#define BIT_PPAWN_W_F5  0x7070700000000000
#define BIT_PPAWN_W_F6  0x7070000000000000
#define BIT_PPAWN_W_F7  0x7000000000000000
#define BIT_PPAWN_W_F8  0x0000000000000000
#define BIT_PPAWN_W_G1  0xe0e0e0e0e0e0e000
#define BIT_PPAWN_W_G2  0xe0e0e0e0e0e00000
#define BIT_PPAWN_W_G3  0xe0e0e0e0e0000000
#define BIT_PPAWN_W_G4  0xe0e0e0e000000000
#define BIT_PPAWN_W_G5  0xe0e0e00000000000
#define BIT_PPAWN_W_G6  0xe0e0000000000000
#define BIT_PPAWN_W_G7  0xe000000000000000
#define BIT_PPAWN_W_G8  0x0000000000000000
#define BIT_PPAWN_W_H1  0xc0c0c0c0c0c0c000
#define BIT_PPAWN_W_H2  0xc0c0c0c0c0c00000
#define BIT_PPAWN_W_H3  0xc0c0c0c0c0000000
#define BIT_PPAWN_W_H4  0xc0c0c0c000000000
#define BIT_PPAWN_W_H5  0xc0c0c00000000000
#define BIT_PPAWN_W_H6  0xc0c0000000000000
#define BIT_PPAWN_W_H7  0xc000000000000000
#define BIT_PPAWN_W_H8  0x0000000000000000

// Bitmasks for passed pawn detection for black pawns
#define BIT_PPAWN_B_A1  0x0000000000000000
#define BIT_PPAWN_B_A2  0x0000000000000003
#define BIT_PPAWN_B_A3  0x0000000000000303
#define BIT_PPAWN_B_A4  0x0000000000030303
#define BIT_PPAWN_B_A5  0x0000000003030303
#define BIT_PPAWN_B_A6  0x0000000303030303
#define BIT_PPAWN_B_A7  0x0000030303030303
#define BIT_PPAWN_B_A8  0x0003030303030303
#define BIT_PPAWN_B_B1  0x0000000000000000
#define BIT_PPAWN_B_B2  0x0000000000000007
#define BIT_PPAWN_B_B3  0x0000000000000707
#define BIT_PPAWN_B_B4  0x0000000000070707
#define BIT_PPAWN_B_B5  0x0000000007070707
#define BIT_PPAWN_B_B6  0x0000000707070707
#define BIT_PPAWN_B_B7  0x0000070707070707
#define BIT_PPAWN_B_B8  0x0007070707070707
#define BIT_PPAWN_B_C1  0x0000000000000000
#define BIT_PPAWN_B_C2  0x000000000000000e
#define BIT_PPAWN_B_C3  0x0000000000000e0e
#define BIT_PPAWN_B_C4  0x00000000000e0e0e
#define BIT_PPAWN_B_C5  0x000000000e0e0e0e
#define BIT_PPAWN_B_C6  0x0000000e0e0e0e0e
#define BIT_PPAWN_B_C7  0x00000e0e0e0e0e0e
#define BIT_PPAWN_B_C8  0x000e0e0e0e0e0e0e
#define BIT_PPAWN_B_D1  0x0000000000000000
#define BIT_PPAWN_B_D2  0x000000000000001c
#define BIT_PPAWN_B_D3  0x0000000000001c1c
#define BIT_PPAWN_B_D4  0x00000000001c1c1c
#define BIT_PPAWN_B_D5  0x000000001c1c1c1c
#define BIT_PPAWN_B_D6  0x0000001c1c1c1c1c
#define BIT_PPAWN_B_D7  0x00001c1c1c1c1c1c
#define BIT_PPAWN_B_D8  0x001c1c1c1c1c1c1c
#define BIT_PPAWN_B_E1  0x0000000000000000
#define BIT_PPAWN_B_E2  0x0000000000000038
#define BIT_PPAWN_B_E3  0x0000000000003838
#define BIT_PPAWN_B_E4  0x0000000000383838
#define BIT_PPAWN_B_E5  0x0000000038383838
#define BIT_PPAWN_B_E6  0x0000003838383838
#define BIT_PPAWN_B_E7  0x0000383838383838
#define BIT_PPAWN_B_E8  0x0038383838383838
#define BIT_PPAWN_B_F1  0x0000000000000000
#define BIT_PPAWN_B_F2  0x0000000000000070
#define BIT_PPAWN_B_F3  0x0000000000007070
#define BIT_PPAWN_B_F4  0x0000000000707070
#define BIT_PPAWN_B_F5  0x0000000070707070
#define BIT_PPAWN_B_F6  0x0000007070707070
#define BIT_PPAWN_B_F7  0x0000707070707070
#define BIT_PPAWN_B_F8  0x0070707070707070
#define BIT_PPAWN_B_G1  0x0000000000000000
#define BIT_PPAWN_B_G2  0x00000000000000e0
#define BIT_PPAWN_B_G3  0x000000000000e0e0
#define BIT_PPAWN_B_G4  0x0000000000e0e0e0
#define BIT_PPAWN_B_G5  0x00000000e0e0e0e0
#define BIT_PPAWN_B_G6  0x000000e0e0e0e0e0
#define BIT_PPAWN_B_G7  0x0000e0e0e0e0e0e0
#define BIT_PPAWN_B_G8  0x00e0e0e0e0e0e0e0
#define BIT_PPAWN_B_H1  0x0000000000000000
#define BIT_PPAWN_B_H2  0x00000000000000c0
#define BIT_PPAWN_B_H3  0x000000000000c0c0
#define BIT_PPAWN_B_H4  0x0000000000c0c0c0
#define BIT_PPAWN_B_H5  0x00000000c0c0c0c0
#define BIT_PPAWN_B_H6  0x000000c0c0c0c0c0
#define BIT_PPAWN_B_H7  0x0000c0c0c0c0c0c0
#define BIT_PPAWN_B_H8  0x00c0c0c0c0c0c0c0

// Bitmasks for individual masks, addressable by square index.
extern const uint64_t BITS_SQ[144];
extern const uint64_t BITS_BISHOP[144];
extern const uint64_t BITS_KNIGHT[144];
extern const uint64_t BITS_ROOK[144];
extern const uint64_t BITS_QUEEN[144];
extern const uint64_t BITS_KING[144];
extern const uint64_t BITS_WPAWN[144];
extern const uint64_t BITS_BPAWN[144];
extern const uint64_t BITS_PASSED_PAWN_W[144];
extern const uint64_t BITS_PASSED_PAWN_B[144];

// Bitmasks for ranks, files, etc, indexed by rank/file index.
extern const uint64_t BITS_FILES[8];
#endif
